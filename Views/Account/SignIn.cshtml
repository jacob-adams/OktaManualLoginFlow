@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Sign In";
}

<script src="https://global.oktacdn.com/okta-signin-widget/5.2.0/js/okta-sign-in.min.js" type="text/javascript"></script>
<link href="https://global.oktacdn.com/okta-signin-widget/5.2.0/css/okta-sign-in.min.css" type="text/css" rel="stylesheet" />
<h2>Sign In</h2>

<div id="widget"></div>

<form method="POST" asp-action="SignIn">
    <input type="hidden" name="sessionToken" id="hiddenSessionTokenField" />
    @Html.AntiForgeryToken()
</form>

<script type="text/javascript">
var signIn = new OktaSignIn({
    baseUrl: '@Configuration["Okta:OktaDomain"]',
    clientId: '@Configuration["Okta:ClientId"]',
    redirectUri: '@Url.Action("Callback", "Account", null, "https", null)',
    authParams: {
        pkce: false,
        responseType: 'code',
        display: 'page',
        responseMode: 'form_post',
        scopes: ['openid', 'email', 'profile']
    },
    idps: [
        {type: 'GOOGLE', id: '@Configuration["Okta:GoogleIdp"]'},
        {type: 'GITHUB', id: '@Configuration["Okta:GitHubIdp"]', text: 'Sign In with GitHub'}
    ]
});

signIn.showSignInAndRedirect({
        // Assumes there is an empty element on the page with an id of 'widget'
        el: '#widget'
    }).catch(function(error) {
        // Handle error
    });
//</script>